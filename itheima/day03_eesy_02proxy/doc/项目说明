动态代解析案例，对于已经实现的类和已经定义的接口采用动态代理的方式可以减小对原来的代码的改动，同时也可以实现对原来的代码的增强
这里采用的基于接口的动态代理模式，要对于要被代理的对象必须要有对应的接口
动态代理：
         特点：字节码随用随创建，随用随加载
         作用：不修改源码的基础上对方法增强
         分类：

              基于接口的动理态代：
                           涉及的类：Proxy
                           提供者：JDK官方
                   如何创建代理对象：
                           使用Proxy类中的newProxyInstance方法
                    创建代理对象的要求：
                           被代理类最少实现一个接口，如果没有则不能使用
                    newProxyInstance方法的参数：
                            ClassLoader:类加载器
                                   他是用于加载代理对象字节码的。和被加载对象使用相同的类加载器，固定写法
                            Class[]：字节码数组
                                   他是用于让代理对象和被代理对象有相同的方法。固定写法
                            InvocationHandler：用于提供增强的代码
                                   他是让我们写如何代理。我们一般都是写一个该接口的实现类，通常情况下都是匿名内部类
                                   但不是必须的。此接口的实现类都是谁用谁写

               基于子类的动态代理：
                             涉及的类：Enhancer
                              提供者：第三方cglib库
                    如何创建代理对象：
                             使用enhancer类中的create方法
                    创建代理对象的要求：
                              被代理类不能是最终类
                              create方法的参数：
                                     class:字节码
                                         用于指定被代理对象的字节码
                                     callback：用于提供增强的代码
                                          他是让我们写如何代理。我们一般都是写一个该接口的实现类，通常情况下都是匿名内部类
                                          但不是必须的。此接口的实现类都是谁用谁写

                                          我们一般写的都是该接口（callback）的子接口实现类：MethodInterceptor







